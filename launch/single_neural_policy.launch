<?xml version="1.0" ?>
<launch>
    <arg name="robot_ip" />
    <arg name="load_gripper" default="true" />
    <arg name="eye_on_hand" default="false" />
    <arg name="use_marker" default="true" />
    <arg name="markerSize" default="0.037" />

    <include file="$(find easy_handeye)/launch/publish.launch">
        <arg name="eye_on_hand" value="$(arg eye_on_hand)" />
        <arg name="namespace_prefix" value="panda_eob_calib" unless="$(arg eye_on_hand)"/>
        <arg name="namespace_prefix" value="panda_eih_calib" if="$(arg eye_on_hand)" />
    </include>

    <node name="virtual_joint_point_boardcaster_1" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 world panda_link0"/>
    
    <!-- (start your robot's MoveIt! stack, e.g. include its moveit_planning_execution.launch) -->
    <include file="$(find franka_control)/launch/franka_control.launch" >
        <arg name="robot_ip" value="$(arg robot_ip)" />
        <arg name="load_gripper" value="$(arg load_gripper)" />
    </include>
    
    <!--rosparam command="load" file="$(find franka_example_controllers)/config/franka_example_controllers.yaml" />
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="cartesian_impedance_example_controller"/!-->
    <rosparam command="load" file="$(find panda_cartesian_impedance)/config/cartesian_impedance_controllers.yaml" />
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="cartesian_ik_controller"/>
  
    <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_example_controllers)/launch/rviz/franka_description_with_marker.rviz"/>      
    
    <!-- (start your tracking system's ROS driver) -->

    <!-- fill in the following parameters according to your tracking system -->
    <group if="$(arg use_marker)" >
        <include file="$(find panda_cartesian_impedance)/launch/tracking_system.launch">
            <arg name="markerSize" value="$(arg markerSize)" />
        </include>
        <!-- read object pose from marker, and command the arm !-->
        <!--node name="obs_publisher" pkg="panda_cartesian_impedance" type="obs_publisher.py" required="true" output="screen">
            <param name="link_name" value="panda_link0" />
            <param name="markers_topic" value="marker_publisher/markers" />
        </node!-->
        <node name="obs_publisher" pkg="panda_cartesian_impedance" type="obs_handover_publisher.py" required="true" output="screen">
            <param name="link_name" value="panda_link0" />
            <param name="markers_topic" value="marker_publisher/markers" />
        </node>
    </group>
    <group unless="$(arg use_marker)" >
        <include file="$(find realsense2_camera)/launch/rs_camera.launch"> </include>     
        <node name="obs_publisher" pkg="panda_cartesian_impedance" type="obs_pixel_publisher.py" required="true" output="screen" />
    </group>
    <arg name="load_path" />
    <arg name="is_recurrent" default="0" />
    <arg name="hidden_size" default="128" />
    <arg name="state_start" value="3" if="$(arg use_marker)" />
    <arg name="state_start" value="21168" unless="$(arg use_marker)" />
    <node name="neural_commander" pkg="panda_cartesian_impedance" type="neural_commander" required="true" output="screen"
     args="$(arg load_path) $(arg state_start) $(arg is_recurrent) $(arg hidden_size)">
        <remap from="equilibrium_pose" to="cartesian_ik_controller/equilibrium_pose" />
    </node>
    <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" required="false" />

</launch>