<?xml version="1.0" ?>
<launch>
    <arg name="robot_ip" />
    <arg name="load_gripper" default="true" />
    <arg name="eye_on_hand" default="false" />
    <arg name="markerSize" default="0.04" />

    <!-- <include file="$(find easy_handeye)/launch/publish.launch">
        <arg name="eye_on_hand" value="$(arg eye_on_hand)" />
        <arg name="namespace_prefix" value="panda_eob_calib" unless="$(arg eye_on_hand)"/>
        <arg name="namespace_prefix" value="panda_eih_calib" if="$(arg eye_on_hand)" />
    </include> -->

    <node name="virtual_joint_point_boardcaster_1" pkg="tf2_ros" type="static_transform_publisher" args="0.88396365 -0.026333976048695515 0.6686705202130805 0.6325118990667172 0.7389738209313085 -0.17506762596772985 -0.15230796386013548 world camera_link"/>

    <node name="virtual_joint_point_boardcaster_2" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 world panda_link0"/>
    
    <!-- (start your robot's MoveIt! stack, e.g. include its moveit_planning_execution.launch) -->
    <include file="$(find franka_control)/launch/franka_control.launch" >
        <arg name="robot_ip" value="$(arg robot_ip)" />
        <arg name="load_gripper" value="$(arg load_gripper)" />
    </include>
    
    <!--rosparam command="load" file="$(find franka_example_controllers)/config/franka_example_controllers.yaml" /!-->
    <!--node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="cartesian_impedance_example_controller"/!-->
    <rosparam command="load" file="$(find panda_cartesian_impedance)/config/cartesian_impedance_controllers.yaml" />
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="cartesian_ik_controller"/>
  
    <node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_example_controllers)/launch/rviz/franka_description_with_marker.rviz"/>      
    
    <include file="$(find panda_cartesian_impedance)/launch/tracking_system.launch" >
        <arg name="markerSize" value="$(arg markerSize)" />
    </include>
    
    <!-- read object pose from marker, and command the arm !-->
    <node name="expert_pick_and_place" pkg="panda_cartesian_impedance" type="expert_pick_and_place.py" required="true" output="screen">
        <!--remap from="equilibrium_pose" to="/cartesian_impedance_example_controller/equilibrium_pose" /!-->
        <remap from="equilibrium_pose" to="cartesian_ik_controller/equilibrium_pose" />
        <param name="link_name" value="panda_link0" />  
        <param name="markers_topic" value="marker_publisher/markers" />
    </node>
    <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" required="false" />

</launch>